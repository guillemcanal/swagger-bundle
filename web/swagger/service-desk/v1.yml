swagger: '2.0'
info:
  title: 'Service Desk API'
  version: 1.0.0
  description: |
    Fictional Service Desk API
basePath: /service-desk/v1
produces:
  - application/json
consumes:
  - application/json
securityDefinitions:
  api_key:
    type: apiKey
    name: Authorization
    in: header
responses:
  ServerError:
    description: 'Server Error'
    schema:
      $ref: '#/definitions/VndError'
  EntityNotFoundError:
    description: 'Entity Not Found'
    schema:
      $ref: '#/definitions/VndError'
  InputError:
    description: 'Input Error'
    schema:
      $ref: '#/definitions/VndError'
  UnauthorizedError:
    description: 'Unauthorized Error'
    schema:
      $ref: '#/definitions/VndError'
paths:
  /ticket:
    get:
      operationId: 'search'
      summary: 'Search for tickets'
      security:
        - api_key: []
      parameters:
        - in: query
          name: status
          type: string
          enum: ['open', 'in-progress', 'closed']
        - in: query
          name: title
          type: string
        - in: query
          name: description
          type: string
        - in: query
          name: type
          type: string
          enum: ['question', 'incident', 'service-request', 'bug-report']
        - in: query
          name: priority
          type: string
          enum: ['high', 'normal', 'low']
      responses:
        200:
          description: 'Found Tickets'
          schema:
            type: array
            items:
              $ref: '#/definitions/Ticket'
        400:
          $ref: '#/responses/InputError'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/ServerError'
    post:
      summary: 'Create a ticket'
      description: "Create a new ticket"
      security:
        - api_key: []
      parameters:
        - in: body
          name: ticket
          required: true
          schema:
            $ref: '#/definitions/Ticket'
      responses:
        200:
          description: 'Ticket data'
          schema:
            $ref: '#/definitions/Ticket'
        400:
          $ref: '#/responses/InputError'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/ServerError'
  '/ticket/{id}':
    get:
      summary: 'Get a ticket'
      description: "Get ticket by id"
      security:
        - api_key: []
      parameters:
        - in: path
          name: id
          required: true
          type: integer
      responses:
        200:
          description: 'Ticket response'
          schema:
            $ref: '#/definitions/Ticket'
        400:
          $ref: '#/responses/InputError'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/EntityNotFoundError'
        500:
          $ref: '#/responses/ServerError'
    put:
      summary: 'Update a ticket'
      security:
        - api_key: []
      parameters:
        - in: path
          name: id
          required: true
          type: integer
        - in: body
          name: ticket
          required: true
          schema:
            $ref: '#/definitions/Ticket'
      responses:
        200:
          description: 'Ticket response'
          schema:
            $ref: '#/definitions/Ticket'
        400:
          $ref: '#/responses/InputError'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/EntityNotFoundError'
        500:
          $ref: '#/responses/ServerError'
  '/ticket/findByTicketNumber/{ticketNumber}':
    get:
      operationId: 'findByTicketNumber'
      summary: 'Get a ticket'
      description: "Get ticket by number"
      security:
        - api_key: []
      parameters:
        - in: path
          name: ticketNumber
          required: true
          description: 'Ticket Number'
          pattern: 'T20\d{2}\.\d{2}\.\d{5}'
          type: string
      responses:
        200:
          description: 'Ticket response'
          schema:
            $ref: '#/definitions/Ticket'
        400:
          $ref: '#/responses/InputError'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/EntityNotFoundError'
        500:
          $ref: '#/responses/ServerError'

definitions:

  Ticket:
    type: object
    required: [title, description, type]
    properties:
      id:
        type: integer
        format: int64
      status:
        enum: ['open', 'in-progress', 'closed']
        type: string
        default: 'open'
      title:
        type: string
        description: 'Ticket title'
      ticketNumber:
        type: string
        description: 'Ticket title'
      description:
        type: string
      type:
        type: string
        enum: ['question', 'incident', 'service-request', 'bug-report']
      priority:
        type: string
        enum: ['high', 'normal', 'low']
        default: 'normal'
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time

  VndError:
    type: object
    required: [message]
    properties:
      message:
        type: string
      logref:
        type: string
